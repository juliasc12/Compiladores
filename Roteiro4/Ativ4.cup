import java_cup.runtime.*;

/*TERMINAIS*/
terminal PTVIRG, MAIS, MENOS, MULT, MOD, DIV, ABREP, FECHAP;
terminal Integer INTEIRO;

/*NÃO TERMINAIS*/
non terminal expr_list, expr_ptv;
non terminal Integer expr, expr_parenteses;

expr_list ::=
    expr_list expr_ptv
    |expr_ptv;

expr_ptv ::=
    expr:e
    {: System.out.println("= " + e); :} PTVIRG
    |expr_parenteses:ep
    {: System.out.println("= " + ep); :} PTVIRG;


expr_parenteses ::=
    /* ABREP expr FECHAP operadores expr */
    ABREP expr:e FECHAP MAIS expr:e
    {: RESULT = new Integer(e.intValue() + e.intValue()); :}

    |ABREP expr:e FECHAP MENOS expr:e
    {: RESULT = new Integer(e.intValue() - e.intValue()); :}

    |ABREP expr:e FECHAP MOD expr:e
    {: RESULT = new Integer(e.intValue() % e.intValue()); :}

    |ABREP expr:e FECHAP MULT expr:e
    {: RESULT = new Integer(e.intValue() * e.intValue()); :}

    |ABREP expr:e FECHAP DIV expr:e
    {: RESULT = new Integer(e.intValue() / e.intValue()); :}

    /* ABREP expr FECHAP operadores expr_parenteses */
    |ABREP expr:e FECHAP MAIS expr_parenteses:ep
    {: RESULT = new Integer(e.intValue() + ep.intValue()); :}

    |ABREP expr:e FECHAP MENOS expr_parenteses:ep
    {: RESULT = new Integer(e.intValue() - ep.intValue()); :}

    |ABREP expr:e FECHAP MOD expr_parenteses:ep
    {: RESULT = new Integer(e.intValue() % ep.intValue()); :}

    |ABREP expr:e FECHAP MULT expr_parenteses:ep
    {: RESULT = new Integer(e.intValue() * ep.intValue()); :}

    |ABREP expr:e FECHAP DIV expr_parenteses:ep
    {: RESULT = new Integer(e.intValue() / ep.intValue()); :}

    /* ABREP expr_parenteses FECHAP */
    |ABREP expr_parenteses:ep FECHAP
    {: RESULT = new Integer(ep.intValue()); :}

    /* ABREP expr FECHAP */
    |ABREP expr:e FECHAP
    {: RESULT = new Integer(e.intValue()); :};

expr ::=
    /* INTEIRO operadores expr  */
    INTEIRO:n MAIS expr:e
    {: RESULT = new Integer(n.intValue() + e.intValue()); :}

    |INTEIRO:n MENOS expr:e
    {: RESULT = new Integer(n.intValue() - e.intValue()); :}

    |INTEIRO:n MOD expr:e
    {: RESULT = new Integer(n.intValue() % e.intValue()); :}

    |INTEIRO:n MULT expr:e
    {: RESULT = new Integer(n.intValue() * e.intValue()); :}

    |INTEIRO:n DIV expr:e
    {: RESULT = new Integer(n.intValue() / e.intValue()); :}

    /* INTEIRO operadores expr_parenteses  */
    |INTEIRO:n MAIS expr_parenteses:ep
    {: RESULT = new Integer(n.intValue() + ep.intValue()); :}

    |INTEIRO:n MENOS expr_parenteses:ep
    {: RESULT = new Integer(n.intValue() - ep.intValue()); :}

    |INTEIRO:n MOD expr_parenteses:ep
    {: RESULT = new Integer(n.intValue() % ep.intValue()); :}

    |INTEIRO:n MULT expr_parenteses:ep
    {: RESULT = new Integer(n.intValue() * ep.intValue()); :}

    |INTEIRO:n DIV expr_parenteses:ep
    {: RESULT = new Integer(n.intValue() / ep.intValue()); :}

    /*Inteiro*/
    |INTEIRO:n
    {: RESULT = n; :};
